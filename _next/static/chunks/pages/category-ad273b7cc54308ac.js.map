{"version":3,"file":"static/chunks/pages/category-ad273b7cc54308ac.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,YACA,WACE,OAAO,EAAQ,U,0IC+EvB,UAvE0C,SAAQ,G,IAALC,EAAK,EAALA,MACPC,GAAAA,EAAAA,EAAAA,UAAmB,IAAhDC,EAA6BD,EAAsB,GAAvCE,EAAiBF,EAAsB,GACpDG,GAAcC,EAAAA,EAAAA,QAAyB,IACvCC,GAAkBD,EAAAA,EAAAA,QAA+B,IAQvD,OANAE,EAAAA,EAAAA,YAAU,WACRJ,EAAcH,EAAMQ,KAAI,SAACC,GACvB,OAAOA,EAAKC,eAEb,CAACV,KAEE,c,mBAEDW,EAAAA,QAAI,C,kBACFC,OAAI,CAACC,KAAK,cAAcC,QAAU,6BAAuC,OAAXZ,Q,QAEhEa,EAAAA,GAAI,CAACC,QAAQ,OAAOC,cAAc,SAASC,QAAS,CAAC,wBAAyB,wBAAyB,qBAAsBC,UAAU,O,mBACrIC,EAAAA,GAAI,CAACC,UAAU,SAASC,SAAU,CAAC,MAAO,MAAO,OAAQC,MAAM,QAAQC,WAAW,SAASN,QAAQ,I,SAAI,c,QACvGE,EAAAA,GAAI,CAACC,UAAU,SAASC,SAAU,CAAC,KAAM,KAAM,OAAQC,MAAM,WAAWC,WAAW,QAAQN,QAAQ,I,SAAI,c,QACvGH,EAAAA,GAAI,CAACU,OAAO,YAAYC,OAAO,OAAOC,eAAe,SAASC,WAAW,S,kBACvEb,EAAAA,GAAI,CAACc,SAAS,OAAOF,eAAe,SAASC,WAAW,S,SACtD1B,GACCA,EAAWM,KAAI,SAACE,EAAUoB,GACxB,OAAM,QACHC,EAAAA,QAAI,CAAWC,KAAO,YAAoB,OAATtB,GAAYuB,UAAQ,E,kBACnDC,EAAAA,GAAG,CACFC,YAAa,WACP/B,EAAYgC,SAAW9B,EAAgB8B,UACzChC,EAAYgC,QAAQN,GAAKO,MAAMC,YAAc,UAC7ChC,EAAgB8B,QAAQN,GAAKO,MAAMd,MAAQ,YAG/CgB,WAAY,WACNnC,EAAYgC,SAAW9B,EAAgB8B,UACzChC,EAAYgC,QAAQN,GAAKO,MAAMC,YAAc,qBAC7ChC,EAAgB8B,QAAQN,GAAKO,MAAMd,MAAQ,UAG/CiB,IAAKC,SAAAA,GAAQrC,EAAYgC,QAAQN,GAAOW,GACxCC,OAAO,UACPC,EAAG,CAAC,QAAS,QAAS,SACtBC,EAAG,CAAC,QAAS,QAAS,SACtBnB,OAAO,gBACPoB,OAAO,+BACP3B,QAAQ,MACRF,QAAQ,OACRC,cAAc,SACdU,eAAe,SACfC,WAAW,S,kBAEVR,EAAAA,GAAI,CAACoB,IAAKC,SAAAA,GAAQnC,EAAgB8B,QAAQN,GAAOW,GAAOjB,WAAW,QAAQF,SAAS,KAAKD,UAAU,S,SAAUX,OA1BvGoB,mB","sources":["webpack://_N_E/?8608","webpack://_N_E/./pages/category/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/category\",\n      function () {\n        return require(\"private-next-pages/category/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/category\"])\n      });\n    }\n  ","import { Box, Flex, Text } from '@chakra-ui/react'\nimport { NextPage } from 'next'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport { useEffect, useRef, useState } from 'react'\nimport { PostsData } from '../../stores/posts'\nimport { getPosts } from '../../utils/loadMarkdownFiles'\n\ninterface CategoryProps {\n  posts: PostsData[];\n}\n\nconst Category: NextPage<CategoryProps> = ({ posts }) => {\n  const [categories, setCategories] = useState<string[]>([])\n  const gridItemRef = useRef<HTMLDivElement[]>([])\n  const gridItemTextRef = useRef<HTMLParagraphElement[]>([])\n\n  useEffect(() => {\n    setCategories(posts.map((post) => {\n      return post.category\n    }))\n  }, [posts])\n\n  return (\n    <>\n      <Head>\n        <meta name=\"description\" content={`This is Blog - Category | ${categories}`}></meta>\n      </Head>\n      <Flex display='flex' flexDirection='column' padding={['100px 1.5em 4em 1.5em', '100px 2.5em 4em 2.5em', '100px 4em 4em 4em']} minHeight='85vh'>\n        <Text textAlign='center' fontSize={['4xl', '4xl', '5xl']} color='black' fontWeight='normal' padding='0'>Category</Text>\n        <Text textAlign='center' fontSize={['xl', 'xl', '2xl']} color='gray.400' fontWeight='light' padding='0'>Keywords</Text>\n        <Flex margin='4em 0 0 0' height='100%' justifyContent='center' alignItems='center'>\n          <Flex flexWrap='wrap' justifyContent='center' alignItems='center'>\n            {categories && (\n              categories.map((category, idx) => {\n                return (\n                  <Link key={idx} href={`category/${category}`} passHref>\n                    <Box\n                      onMouseOver={() => {\n                        if (gridItemRef.current && gridItemTextRef.current) {\n                          gridItemRef.current[idx].style.borderColor = '#4299E1'\n                          gridItemTextRef.current[idx].style.color = '#4299E1'\n                        }\n                      }}\n                      onMouseOut={() => {\n                        if (gridItemRef.current && gridItemTextRef.current) {\n                          gridItemRef.current[idx].style.borderColor = 'rgba(0, 0, 0, 0.2)'\n                          gridItemTextRef.current[idx].style.color = 'black'\n                        }\n                      }}\n                      ref={el => { gridItemRef.current[idx] = el! }}\n                      cursor='pointer'\n                      w={['120px', '120px', '140px']}\n                      h={['120px', '120px', '140px']}\n                      margin='-1px -1px 0 0'\n                      border='1px solid rgba(0, 0, 0, 0.2)'\n                      padding='2em'\n                      display='flex'\n                      flexDirection='column'\n                      justifyContent='center'\n                      alignItems='center'\n                    >\n                      <Text ref={el => { gridItemTextRef.current[idx] = el! }} fontWeight='light' fontSize='md' textAlign='center'>{category}</Text>\n                    </Box>\n                  </Link>\n                )\n              })\n            )}\n          </Flex>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport async function getStaticProps () {\n  return {\n    props: {\n      posts: getPosts()\n    }\n  }\n}\n\nexport default Category\n"],"names":["window","__NEXT_P","push","posts","useState","categories","setCategories","gridItemRef","useRef","gridItemTextRef","useEffect","map","post","category","Head","meta","name","content","Flex","display","flexDirection","padding","minHeight","Text","textAlign","fontSize","color","fontWeight","margin","height","justifyContent","alignItems","flexWrap","idx","Link","href","passHref","Box","onMouseOver","current","style","borderColor","onMouseOut","ref","el","cursor","w","h","border"],"sourceRoot":""}