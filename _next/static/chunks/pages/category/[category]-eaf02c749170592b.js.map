{"version":3,"file":"static/chunks/pages/category/[category]-eaf02c749170592b.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,uBACA,WACE,OAAO,EAAQ,U,gDCFnBC,EAAiD,KAoCrD,I,SAlC+BC,EAAWC,GACxC,IAAgCC,GAAAA,EAAAA,EAAAA,UAAiBD,GAA1CE,EAAyBD,EAA0B,GAAzCE,EAAeF,EAA0B,GAC1BA,GAAAA,EAAAA,EAAAA,UAAgB,IAAzCG,EAAyBH,EAAmB,GAAlCI,EAAeJ,EAAmB,GAE7CK,GAAsBC,EAAAA,EAAAA,cAAY,WACjBC,SAASC,gBAAgBC,aAC5BF,SAASC,gBAAgBE,WAEO,IAD7BH,SAASC,gBAAgBG,eAEvCd,IACHA,EAAWe,YAAW,WACpBf,EAAW,KACPI,EAAWH,EAAKe,QAClBX,EAAYD,EAAWF,KAExB,SAGN,CAACE,EAAUH,EAAKe,OAAQd,IAW3B,OATAe,EAAAA,EAAAA,YAAU,WAER,OADApB,OAAOqB,iBAAiB,SAAUV,GAC3B,WAAMX,OAAAA,OAAOsB,oBAAoB,SAAUX,MACjD,CAACA,KAEJS,EAAAA,EAAAA,YAAU,WACRV,EAAYN,EAAKmB,MAAM,EAAGhB,MACzB,CAACH,EAAMG,IAEH,CACLH,KAAMK,K,iLCqFV,UAnG0D,SACrD,G,IAAHe,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAK,EAALA,MAEMC,GAAeC,EAAAA,EAAAA,IAAkBC,EAAAA,GAC/BzB,GAAS0B,EAAAA,EAAAA,GAA4BJ,EAAO,GAA5CtB,KACF2B,GAASC,EAAAA,EAAAA,aAkBf,OAhBAZ,EAAAA,EAAAA,YAAU,WACRO,EAAaH,KACZ,CAACA,EAAOG,KAEXP,EAAAA,EAAAA,YAAU,WACR,IAAMa,EAAWpB,SAASqB,eAAe,aAIzC,OAHID,IACFA,EAASE,UAAa,GAAuCV,OAArCA,EAASF,MAAM,EAAG,GAAGa,eAAkC,OAAlBX,EAASF,MAAM,KAEvE,WACDU,IACFA,EAASE,UAAY,OAGxB,CAACV,KAEE,c,mBAEDY,EAAAA,QAAI,C,mBACFC,QAAK,C,SAAG,GAAuCb,OAArCA,EAASF,MAAM,EAAG,GAAGa,eAAkC,OAAlBX,EAASF,MAAM,O,QAC9DgB,OAAI,CAACC,KAAK,cAAcC,QAAU,kBAA0B,OAAThB,S,QAErDiB,EAAAA,GAAI,CAACC,OAAO,OAAOC,eAAe,QAAQC,WAAW,SAASC,cAAc,SAASC,QAAS,CAAC,uBAAwB,uBAAwB,oBAAqB,qBAAsBC,UAAU,OAAOC,gBAAgB,mB,kBACzNC,MAAG,CAACC,MAAO,CAAEC,MAAO,OAAQC,SAAU,U,mBACpCC,EAAAA,GAAG,CAACF,MAAM,OAAOT,OAAO,OAAOY,WAAW,QAAQC,SAAS,WAAWC,IAAI,IAAIC,KAAK,IAAIC,cAAc,OAAOC,aAAa,iCACzHxD,EAAKyD,KAAI,SAACC,EAAMC,GACf,OAAM,QACHC,EAAAA,EAAQ,CAEPF,KAAMA,EACNG,QAAS,WAAMlC,OAAAA,EAAO7B,KAAM,SAAqC4D,OAA7BA,EAAKI,YAAYzC,SAAS,KAAa,OAAVqC,EAAKK,SAFjEJ,iB","sources":["webpack://_N_E/?68e6","webpack://_N_E/./components/shared/useInfinityScroll.tsx","webpack://_N_E/./pages/category/[category].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/category/[category]\",\n      function () {\n        return require(\"private-next-pages/category/[category].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/category/[category]\"])\n      });\n    }\n  ","import { useCallback, useEffect, useState } from 'react'\n\nlet throttle: ReturnType<typeof setTimeout> | null = null\n\nfunction useInfinityScroll<T> (data: T[], loadSize: number): { data: T[] } {\n  const [sliceLen, setSliceLen] = useState<number>(loadSize)\n  const [lazyData, setLazyData] = useState<any[]>([])\n\n  const infinityScrollEvent = useCallback(() => {\n    const scrollHeight = document.documentElement.scrollHeight\n    const scrollTop = document.documentElement.scrollTop\n    const clientHeight = document.documentElement.clientHeight\n    if ((scrollHeight - scrollTop) <= (clientHeight * 2.5)) {\n      if (!throttle) {\n        throttle = setTimeout(() => {\n          throttle = null\n          if (sliceLen < data.length) {\n            setSliceLen(sliceLen + loadSize)\n          }\n        }, 300)\n      }\n    }\n  }, [sliceLen, data.length, loadSize])\n\n  useEffect(() => {\n    window.addEventListener('scroll', infinityScrollEvent)\n    return () => window.removeEventListener('scroll', infinityScrollEvent)\n  }, [infinityScrollEvent])\n\n  useEffect(() => {\n    setLazyData(data.slice(0, sliceLen))\n  }, [data, sliceLen])\n\n  return {\n    data: lazyData\n  }\n}\n\nexport default useInfinityScroll\n","import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport { Box, Flex } from '@chakra-ui/react'\nimport { NextPage } from 'next'\nimport { PostData, PostsData, postsDataState } from '../../stores/posts'\nimport { useEffect } from 'react'\nimport Head from 'next/head'\nimport { getPosts } from '../../utils/loadMarkdownFiles'\nimport { useSetRecoilState } from 'recoil'\nimport CardPost from '../../components/shared/cardPost'\nimport { useRouter } from 'next/router'\nimport useInfinityScroll from '../../components/shared/useInfinityScroll'\n\ninterface CategoryItemListProps {\n  posts: PostsData[];\n  category: string;\n  files: PostData[];\n}\n\nconst CategoryItemList: NextPage<CategoryItemListProps> = ({\n  posts,\n  category,\n  files\n}) => {\n  const setPostsData = useSetRecoilState(postsDataState)\n  const { data } = useInfinityScroll<PostData>(files, 8)\n  const router = useRouter()\n\n  useEffect(() => {\n    setPostsData(posts)\n  }, [posts, setPostsData])\n\n  useEffect(() => {\n    const topTitle = document.getElementById('top-title')\n    if (topTitle) {\n      topTitle.innerHTML = `${category.slice(0, 1).toUpperCase()}${category.slice(1)}`\n    }\n    return () => {\n      if (topTitle) {\n        topTitle.innerHTML = ''\n      }\n    }\n  }, [category])\n\n  return (\n    <>\n      <Head>\n        <title>{`${category.slice(0, 1).toUpperCase()}${category.slice(1)}`}</title>\n        <meta name=\"description\" content={`This is Blog - ${category}`}></meta>\n      </Head>\n      <Flex height='100%' justifyContent='start' alignItems='center' flexDirection='column' padding={['96px 1.5em 2em 1.5em', '96px 2.5em 2em 2.5em', '112px 4em 2em 4em', '112px 8em 2em 8em']} minHeight='85vh' backgroundColor='rgba(0,0,0,0.05)'>\n        <div style={{ width: '100%', maxWidth: '1320px' }}>\n          <Box width='100%' height='64px' background='white' position='absolute' top='0' left='0' pointerEvents='none' borderBottom='1px solid rgba(0, 0, 0, 0.2)'></Box>\n          {data.map((file, idx) => {\n            return (\n              <CardPost\n                key={idx}\n                file={file}\n                onClick={() => router.push(`/post/${file.frontmatter.category}/${file.slug}`)}\n              ></CardPost>\n            )\n          })}\n        </div>\n      </Flex>\n    </>\n  )\n}\n\nexport async function getStaticPaths () {\n  const files = fs.readdirSync(path.join('./public/post'))\n  const paths = files.map(dirName => {\n    const dirs = fs.readdirSync(path.join(`./public/post/${dirName}`))\n    const slugs = dirs.map(dir => {\n      return dir.replace('.md', '')\n    })\n    const params = slugs.map((slug) => {\n      return {\n        params: {\n          category: dirName,\n          slug: slug\n        }\n      }\n    })\n    return params\n  })\n  return {\n    paths: paths.flat(),\n    fallback: false\n  }\n}\n\ninterface getStaticPropsProperty {\n  params: {\n    category: string;\n  }\n}\n\nexport async function getStaticProps ({ params: { category } }: getStaticPropsProperty) {\n  const categoryDirs = fs.readdirSync(path.join(`./public/post/${category}`))\n  const files = categoryDirs.map((categoryDir) => {\n    const markdownWithMeta = fs.readFileSync(path.join(`./public/post/${category}/${categoryDir}`, `${categoryDir}.md`), 'utf-8')\n    const { data: frontmatter, content } = matter(markdownWithMeta)\n    return {\n      slug: categoryDir,\n      frontmatter,\n      content\n    }\n  })\n\n  return {\n    props: {\n      posts: getPosts(),\n      category: category,\n      files: files\n    }\n  }\n}\n\nexport default CategoryItemList\n"],"names":["window","__NEXT_P","push","throttle","data","loadSize","useState","sliceLen","setSliceLen","lazyData","setLazyData","infinityScrollEvent","useCallback","document","documentElement","scrollHeight","scrollTop","clientHeight","setTimeout","length","useEffect","addEventListener","removeEventListener","slice","posts","category","files","setPostsData","useSetRecoilState","postsDataState","useInfinityScroll","router","useRouter","topTitle","getElementById","innerHTML","toUpperCase","Head","title","meta","name","content","Flex","height","justifyContent","alignItems","flexDirection","padding","minHeight","backgroundColor","div","style","width","maxWidth","Box","background","position","top","left","pointerEvents","borderBottom","map","file","idx","CardPost","onClick","frontmatter","slug"],"sourceRoot":""}