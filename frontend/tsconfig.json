{
  "compilerOptions": {
    /* https://aka.ms/tsconfig.json */
    /* 기본 옵션 */
    "target": "es6", /* ECMAScript 버전 설정 */
    "module": "esnext", /* 모듈을 위한 코드 생성 설정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "allowJs": true, /* 자바스크립트 파일 컴파일 허용 여부 */
    "incremental": true,
    "declaration": true, /* '.d.ts' 파일 생성 여부 */
    "declarationMap": true, /* '.d.ts' 파일의 소스맵 성성 여부 */
    "sourceMap": true, /* .map 파일 생성 여부 */
    "outDir": "./dist/", /* 결과 구조를 보냄 */
    "lib": [
      "es6",
      "dom",
      "dom.iterable",
      "esnext"
    ], /* 포함할 라이브러리 */
    "jsx": "preserve", /* JSX 코드 생성 설정: 'preserve', 'react-native', 혹은 'react'. */
    "jsxImportSource": "@emotion/react",
    "noEmit": true, /* 결과 파일 내보낼지 여부 */
    "removeComments": true, /* 주석 삭제 여부 */
    "downlevelIteration": true, /* 타겟이 'ES5', 'ES3'일 때에도 'for-of', spread 그리고 destructuring 문법 모두 지원 */
    "resolveJsonModule": true,
    "isolatedModules": true, /* 각 파일을 분리된 모듈로 트랜스파일 ('ts.transpileModule'과 비슷합니다). */ /* 엄격한 타입-확인 옵션 */
    "strict": true, /* 모든 엄격한 타입 옵션 활성화 여부 */
    "noImplicitAny": true, /* 'any' 타입의 표현식 혹은 정의 에러처리 여부 */ /* 추가적인 확인 */// "noUnusedLocals": true, /* 사용되지 않은 지역 변수에 대한 에러보고 여부 */
    // "noUnusedParameters": true, /* 사용되지 않은 파라미터에 대한 에러보고 여부 */
    "noImplicitReturns": true, /* 함수에서 코드의 모든 경로가 값을 반환하지 않을 시 에러보고 여부 */
    "noFallthroughCasesInSwitch": true, /* switch문에서 fallthrough 케이스에 대한 에러보고 여부 */ /* 모듈 해석 옵션 */
    "esModuleInterop": true, /* 모든 imports에 대한 namespace 생성을 통해 CommonJS와 ES Modules 간의 상호 운용성이 생기게할 지 여부, 'allowSyntheticDefaultImports'를 암시적으로 승인합니다. */
    "allowSyntheticDefaultImports": true, /* default export이 아닌 모듈에서도 default import가 가능하게 할 지 여부, 해당 설정은 코드 추출에 영향은 주지 않고, 타입확인에만 영향을 줍니다 */
    "moduleResolution": "node", /* 모듈 해석 방법 설정: 'node' (Node.js) 혹은 'classic' (TypeScript pre-1.6). */
    "typeRoots": [
      "./node_modules/@types"
    ], /* 타입 정의를 포함할 폴더 목록, 설정 안 할 시 기본적으로 ./node_modules/@types로 설정 */ /* 소스 맵 옵션 */// "sourceRoot": "", /* 소스 위치 대신 디버거가 알아야 할 TypeScript 파일이 위치할 곳 */
    // "mapRoot": "", /* 생성된 위치 대신 디버거가 알아야 할 맵 파일이 위치할 곳 */
    // "inlineSourceMap": true, /* 분리된 파일을 가지고 있는 대신, 단일 파일을 소스 맵과 가지고 있을 지 여부 */
    // "inlineSources": true, /* 소스맵과 나란히 소스를 단일 파일로 내보낼 지 여부, '--inlineSourceMap' 혹은 '--sourceMap'가 설정되어 있어야 한다. */
    /* 실험적 옵션 */
    // "experimentalDecorators": true, /* ES7의 decorators에 대한 실험적 지원 여부 */
    // "emitDecoratorMetadata": true, /* decorator를 위한 타입 메타데이터를 내보내는 것에 대한 실험적 지원 여부 */
    /* 추가 옵션 */
    "skipLibCheck": true, /* 정의 파일의 타입 확인을 건너 뛸지 여부 */
    "forceConsistentCasingInFileNames": true /* 같은 파일에 대한 일관되지 않은 참조를 허용하지 않을지 여부 */
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
